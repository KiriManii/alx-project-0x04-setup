import { configureStore, createSlice  } from "@reduxjs/toolkit";
import { useDispatch } from "react-redux"; // For creating a typed dispatch hook

// 1. Create a Slice:
// createSlice is a Redux Toolkit function that simplifies defining reducers and actions.
// It automatically generates action creators and action types.
const counterSlice = createSlice({
  name: 'counter', // A name for this slice of state (used in action types)
  initialState: {
    value: 0 // The initial state for our counter
  },
  reducers: {
    // Reducer functions to handle state updates.
    // Redux Toolkit uses Immer internally, so you can "mutate" state directly
    // within a reducer, and it will handle immutability correctly.
    increment: (state) => {
      state.value += 1; // Increment the counter value
    },
    decrement: (state) => {
      // Decrement the counter, ensuring it doesn't go below 0
      state.value = state.value > 0 ? state.value - 1 : 0;
    },
    reset: (state) => { // Adding a reset action for completeness
      state.value = 0;
    }
  }
});


// 2. Configure the Store:
// configureStore is a Redux Toolkit function that wraps the standard Redux createStore
// and provides good defaults, like Redux DevTools integration and thunk middleware.
const store = configureStore({
  reducer: {
    // Combine reducers. Here, 'counter' is a key that refers to the counterSlice's reducer.
    // This means our state will have a 'counter' property, e.g., state.counter.value
    counter: counterSlice.reducer
  }
});

// 3. Export Actions:
// Destructure and export the action creators generated by createSlice.
// These are functions you'll call to dispatch actions (e.g., dispatch(increment())).
export const { increment, decrement, reset } = counterSlice.actions; // Export reset action

// 4. Define Types for RootState and AppDispatch:
// These types provide strong type checking for our Redux store.
// RootState infers the type of the entire store's state.
export type RootState = ReturnType<typeof store.getState>;
// AppDispatch infers the type of the store's dispatch function.
export type AppDispatch = typeof store.dispatch;

// 5. Create a Typed Hook for Dispatch:
// This custom hook prevents you from having to manually type useDispatch every time.
export const useAppDispatch = () => useDispatch<AppDispatch>();

// 6. Export the Store:
// The store instance itself is exported as the default, to be used by the Provider.
export default store;
